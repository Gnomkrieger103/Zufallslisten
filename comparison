public class Vergleich
{

    public static int[] zufallsliste(int n){ //Erstellung einer Zufallsliste mit der Länge n
        int[] liste = new int[n];
        int x;
        for(int i=0; i<n;i++){
            x = (int) Math.floor(n*Math.random()+1); 
            liste[i] = x;
        }

        return liste;
    }

    public static int[] copy(int[] liste) { //Erstellung einer Liste mit den gleichen Zahlen wie in "liste"
        int[] cliste = new int[liste.length];
        for(int n=0;n<liste.length;n++){
            cliste[n] = liste[n];
        }
        return cliste;
    }

    public static int[] reversesort(int[] liste) { //Durchsucht die Liste nach dem größten Wert 
        //und speichert diesen in einer zweiten Liste
        int temp = 0;
        int in = 0;
        int[] liste2 = new int[liste.length]; 
        for(int j=liste.length-1;j>=0;j--){
            //Array wird von vorne nach hinten durchlaufen
            for(int n=0;n<liste.length;n++){
                //Überprüfung, ob der jeweilige Wert an der Indexposition "n" größer als temp ist
                if(liste[n]>temp){
                    temp = liste[n];
                    in = n;
                    liste2[j] = temp;
                }
            }
            liste[in] = 0;
            temp = 0;
            in = 0;
        }
        return liste2;
    }

    public static void bubblesort(int[] liste) {
        //Array wird von vorne nach hinten durchlaufen
        for(int i=1;i<liste.length;i++){
            for(int n=0;n<liste.length-i;n++){
                //Überprüfung, ob der jeweilige Wert an der Indexposition "n" größer als sein 
                //Nachfolgewert an Indexposition "n+1" ist
                if(liste[n]>liste[n+1]){
                    tauschen(liste,n,n+1);
                }
            }
        }
    }

    public static void quicksort(int[] liste, int links, int rechts) 
    {
        //Überprüfung, ob die Liste leer oder eine Länge von 0 hat
        if (liste == null || liste.length == 0){
            return;
        }

        if (links >= rechts){
            return;
        }

        //Ermittlung des Pivot-Elements aus der Mitte der Liste
        int mitte = links + (rechts - links) / 2;
        int pivot = liste[mitte];

        //Macht "links" kleiner als das Pivot-Element und "rechts" größer als das Pivot-Element
        int i = links;
        int j = rechts;
        while (i <= j) 
        {
            //Überprüfung, bis alle Werte auf der linken Seite der Liste niedriger als das Pivot-Element sind
            while (liste[i] < pivot) 
            {
                i++;
            }
            //Überprüfung, bis alle Werte auf der rechten Seite der Liste größer als das Pivot-Element sind
            while (liste[j] > pivot) 
            {
                j--;
            }
            //Vergleich der Werte auf beiden Seiten der Liste, um festzustellen, ob sie getauscht werden müssen
            if (i <= j) 
            {
                tauschen(liste, i, j);
                i++;
                j--;
            }
        }
        //Ausführung der selben Methode, um zwei Unterlisten zu sortieren
        if (links < j){
            quicksort(liste, links, j);
        }

        if (rechts > i){
            quicksort(liste, i, rechts);
        }
    }

    public static void tauschen (int[] liste, int a, int b) //Tauscht die Werte an der Indexposition a und b
    {
        int temp = liste[a];
        liste[a] = liste[b];
        liste[b] = temp;
    }

    public static void ausgabe(int[] liste) {
        System.out.print("{");
        for (int i =0; i<liste.length-1;i++) {
            System.out.print(liste[i]+", ");
        }
        System.out.println(liste[liste.length-1]+"}");
    }

    public static void main(String[] args) 
    {
        System.out.println("Listenlänge: RS:BS:QS | Zeit(ms):");
        int i = 0;
        for(int n=2;n<=Math.pow(2,26);n=2*n){
            i++;
            //Erstellung einer Zufallsliste mit der Länge n
            int[] liste = zufallsliste(n);
            //Erstellung einer Kopie der Liste
            int [] liste2 = copy(liste);
            int [] liste3 = copy(liste);
            long start = 0;
            long start2 = 0;
            long start3 = 0;
            long ende = 0;
            long ende2 = 0;
            long ende3 = 0;
            if(i<=18){
                start = System.currentTimeMillis();
                //Sortiert die Liste mit Reversesort
                reversesort(liste);
                ende = System.currentTimeMillis();
            }
            if(i<=19){
                start2 = System.currentTimeMillis();
                //Sortiert die Liste mit Bubblesort
                bubblesort(liste);
                ende2 = System.currentTimeMillis();
            }
            start3 = System.currentTimeMillis();
            //Sortiert die Liste mit Quicksort
            quicksort(liste, 0, liste.length - 1 );
            ende3 = System.currentTimeMillis();
            if(i<=18){
                System.out.println("2^"+i+":"+(ende-start)+":"+(ende2-start2)+":"+(ende3-start3));
            } else
            if(i==19){
                System.out.println("2^"+i+":"+"X"+":"+(ende2-start2)+":"+(ende3-start3));
            } else{
                System.out.println("2^"+i+":"+"X"+":"+"X"+":"+(ende3-start3));
            }
        }
    }

}
